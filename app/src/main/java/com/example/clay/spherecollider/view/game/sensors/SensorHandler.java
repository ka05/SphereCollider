package com.example.clay.spherecollider.view.game.sensors;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

/**
 * Responsible for handling sensor events
 * Notifies subscribers when a change has been made
 */
public class SensorHandler extends Observable implements SensorEventListener {
    private Context context;

    private SensorManager sensorManager;
    private Sensor accelerometer;
    private Sensor magnetometer;
    private float[] gravity, geomagnetic;
    private float pitch, roll;

    private List<Observer> observers;
    /**
     * Default constructor
     *
     * @param context Application context
     */
    public SensorHandler(Context context) {
        this.context = context;
        this.startSensorListener();
        this.observers = new ArrayList<Observer>();
    }

    /**
     * Adds and observer to the List
     *
     * @param observer
     */
    @Override
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public synchronized void deleteObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers(Object data) {
        for (Observer o: observers) {
            o.update(this, data);
        }
    }

    @Override
    public void notifyObservers() {
        for (Observer o: observers) {
            o.update(this, null);
        }
    }

    /**
     * SensorEventListener override
     * Called when one of the sensors being watched changes
     * @param event
     */
    @Override
    public void onSensorChanged(SensorEvent event) {
        // get values generated by the sensors
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) gravity = event.values;
        if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) geomagnetic = event.values;

        // get the orientation
        if (gravity != null && geomagnetic != null) {
            float R[] = new float[9];
            float I[] = new float[9];
            boolean gotRotationMatrix = SensorManager.getRotationMatrix(R, I, gravity, geomagnetic);

            // check for success
            if (gotRotationMatrix) {
                float orientation[] = new float[3];
                SensorManager.getOrientation(R, orientation);
                pitch = orientation[1];
                roll = orientation[2];
                this.notifyObservers();
            }
        }
    }

    /**
     * Unused SensorEventListener override
     * @param sensor
     * @param accuracy
     */
    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    /**
     * Starts the sensor manager
     * Gets the sensors we are listening to
     * Registers the listener with the manager
     */
    public void startSensorListener() {
        sensorManager = (SensorManager)this.context.getSystemService(Context.SENSOR_SERVICE);
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        magnetometer = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_GAME);
        sensorManager.registerListener(this, magnetometer, SensorManager.SENSOR_DELAY_GAME);
    }

    /**
     * Unregisters this class as a listener
     */
    public void stopSensorListener() {
        sensorManager.unregisterListener(this);
    }

    /**
     * Gets the pitch
     * @return
     */
    public float getPitch() {
        return pitch;
    }

    /**
     * Gets the roll
     * @return
     */
    public float getRoll() {
        return roll;
    }
}
